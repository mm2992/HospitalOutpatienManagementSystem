<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.graduate.hospital.mapper.DoctorMapper">
  <resultMap id="BaseResultMap" type="com.graduate.hospital.model.Doctor">
    <id column="doctor_id" jdbcType="VARCHAR" property="doctorId" />
    <result column="doctor_name" jdbcType="VARCHAR" property="doctorName" />
    <result column="doctor_sex" jdbcType="CHAR" property="doctorSex" />
    <result column="dept_id" jdbcType="VARCHAR" property="deptId" />
    <result column="level_id" jdbcType="VARCHAR" property="levelId" />
    <result column="entry_date" jdbcType="VARCHAR" property="entryDate" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
  <sql id="Base_Column_List">
    doctor_id, doctor_name,  doctor_sex, dept_id, level_id, entry_date,
    password
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from doctor
    where doctor_id = #{doctorId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from doctor
    where doctor_id = #{doctorId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.graduate.hospital.model.Doctor">
    insert into doctor (doctor_id, doctor_name,
      doctor_sex, dept_id, level_id,
      entry_date, password)
    values (#{doctorId,jdbcType=VARCHAR}, #{doctorName,jdbcType=VARCHAR},
      #{doctorSex,jdbcType=CHAR}, #{deptId,jdbcType=VARCHAR}, #{levelId,jdbcType=VARCHAR},
      #{entryDate,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.graduate.hospital.model.Doctor">
    insert into doctor
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="doctorId != null">
        doctor_id,
      </if>
      <if test="doctorName != null">
        doctor_name,
      </if>
      <if test="doctorSex != null">
        doctor_sex,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="levelId != null">
        level_id,
      </if>
      <if test="entryDate != null">
        entry_date,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="doctorId != null">
        #{doctorId,jdbcType=VARCHAR},
      </if>
      <if test="doctorName != null">
        #{doctorName,jdbcType=VARCHAR},
      </if>
      <if test="doctorSex != null">
        #{doctorSex,jdbcType=CHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="levelId != null">
        #{levelId,jdbcType=VARCHAR},
      </if>
      <if test="entryDate != null">
        #{entryDate,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.graduate.hospital.model.Doctor">
    update doctor
    <set>
      <if test="doctorName != null">
        doctor_name = #{doctorName,jdbcType=VARCHAR},
      </if>
      <if test="doctorSex != null">
        doctor_sex = #{doctorSex,jdbcType=CHAR},
      </if>
      <if test="deptId != null and deptId !='000'">
        dept_id = #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="levelId != null and levelId!='000'">
        level_id = #{levelId,jdbcType=VARCHAR},
      </if>
      <if test="entryDate != null">
        entry_date = #{entryDate,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where doctor_id = #{doctorId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.graduate.hospital.model.Doctor">
    update doctor
    set doctor_name = #{doctorName,jdbcType=VARCHAR},
      doctor_sex = #{doctorSex,jdbcType=CHAR},
      dept_id = #{deptId,jdbcType=VARCHAR},
      level_id = #{levelId,jdbcType=VARCHAR},
      entry_date = #{entryDate,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where doctor_id = #{doctorId,jdbcType=VARCHAR}
  </update>

<!--  根据编号，密码，查对应对象-->
  <select id="queryDoctor" resultMap="BaseResultMap">
        select
    <include refid="Base_Column_List" />
    from doctor
    where
    doctor_id=#{doctorId}
    and
    password=#{password}
  </select>

<!--  查找所有的符合条件的记录总条数-->
  <select id="getDoctorCount" resultType="int">
    select count(*)
    from doctor
    <where>
      <if test="doctor.doctorId!=null and doctor.doctorId!=''">
        doctor_id like '%' #{doctor.doctorId} '%'
      </if>
      <if test="doctor.doctorName!=null and doctor.doctorName!=''">
        and doctor_name like '%' #{doctor.doctorName} '%'
      </if>
      <if test="doctor.entryDate!=null and doctor.entryDate!=''">
        and entry_date &gt; #{doctor.entryDate}
      </if>
        <if test="doctor.deptId!=null and doctor.deptId!=000">
            and dept_id=#{doctor.deptId}
        </if>
    </where>
  </select>

<!--  分页查询-->

  <select id="getDoctorVoList" resultType="com.graduate.hospital.vo.DoctorVo">
    select do.doctor_id doctorId,do.doctor_name doctorName,de.dept_name deptName,l.level_name levelName,do.entry_date entryDate
    from doctor do
    join department de
    on do.dept_id=de.dept_id
    join level l
    on l.level_id=do.level_id
    <where>
      <if test="doctor.doctorId!=null and doctor.doctorId!=''">
        do.doctor_id like '%' #{doctor.doctorId} '%'
      </if>
      <if test="doctor.doctorName!=null and doctor.doctorName!=''">
        and do.doctor_name like '%' #{doctor.doctorName} '%'
      </if>
      <if test="doctor.entryDate!=null and doctor.entryDate!=''">
        and do.entry_date &gt; #{doctor.entryDate}
      </if>
      <if test="doctor.deptId!=null and doctor.deptId!=000">
        and do.dept_id=#{doctor.deptId}
      </if>
    </where>

    limit #{skinPage},#{pageSize}
  </select>

<!--  批量删除-->
<delete id="deleteByPrimaryKeys">
  delete from doctor where doctor_id in
    <foreach collection="array" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
</delete>

  <select id="selectDoctor" resultType="com.graduate.hospital.vo.DoctorVo">
    select do.doctor_id doctorId,do.doctor_name doctorName,do.doctor_sex doctorSex,de.dept_name deptName,l.level_name levelName,do.entry_date entryDate
    from doctor do
           join department de
                on do.dept_id=de.dept_id
           join level l
                on l.level_id=do.level_id
    where do.doctor_id=#{doctorId}
  </select>

<!--  修改密码-->
  <update id="changePwd">
    update doctor set password=#{newPwd} where doctor_id=#{doctorId}
  </update>
</mapper>